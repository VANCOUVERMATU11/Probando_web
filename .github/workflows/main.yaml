name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install modules
      run: yarn
    - name: Run ESLint
      run: yarn eslint . --ext .js

  api-call:
    # needs: lint
    # Esto lo podríamos tener si quisieramos que se ejecute después del lint y solo si se linteó bien 
    runs-on: ubuntu-latest
    steps:
    - name: Hacer POST
      run: |
          echo "SABEEEE"
          curl -X POST https://pokemon-api-vpmj.onrender.com/cards \
          -H "Content-Type: application/json" \
          -d '{"nombre": "Pokemon bakano",
                  "tipo": "Agua",
                  "faseEvolucion": "Fase 1",
                  "puntosSalud": 690,
                  "ataques": [
                  {
                    "nombre": "Lanzallamas",
                    "costoEnergia": ["Fuego", "Fuego", "Incolora"],
                    "danio": "100",
                    "descripcion": "Quema al Pokémon Defensor"
                  }
                  ]
              }' 
              echo "POST se ha hecho, esto aparece en el output de github?"
              echo "Código de respuesta recibido: $response_code"

  update-readme:
    needs: api-call
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Actualizar version y timestamp
        run: |
          # Buscar linea de version (sin tilde)
          version_line=$(grep -n '^Version actual: v[0-9]\+\.[0-9]\+\.[0-9]\+' README.md | cut -d: -f1)
          
          if [ -z "$version_line" ]; then
            echo "::error::No se encontró 'Version actual: vX.X.X' en README.md"
            exit 1
          fi
          
          # Extraer y actualizar version
          current_version=$(grep -o 'Version actual: v[0-9]\+\.[0-9]\+\.[0-9]\+' README.md | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          IFS='.' read -r major minor patch <<< "$current_version"
          new_version="v$major.$minor.$((patch + 1))"
          
          # Actualizar usando awk para mayor seguridad
          awk -i inplace -v line="$version_line" -v new_ver="$new_version" '
            NR==line {sub(/v[0-9]+\.[0-9]+\.[0-9]+/, new_ver)}
            {print}
          ' README.md
          
          # Añadir/actualizar timestamp
          timestamp="Ultima ejecucion: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          sed -i '/^Ultima ejecucion:/d' README.md  # Eliminar existentes
          sed -i "${version_line}a $timestamp" README.md  # Añadir nuevo
          
          echo "Version actualizada a $new_version"
          echo "$timestamp agregado"
          
      - name: Commit y push
        run: |
          git add README.md
          git commit -m "Auto-update version to $(grep -o 'Version actual: v[0-9]\+\.[0-9]\+\.[0-9]\+' README.md)"
          git push